#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
`core.builders.build_ensembles` [module]

Classes
-------
`EnsemblesBuilder`
"""
# pylint: disable=missing-function-docstring

from types import MappingProxyType
from typing import List, Tuple, Dict, Optional, Mapping

import numpy as np

from core.builders.base_builder import DataBuilder
from core.coordinates.base_coord import Coordinate
from core.coordinates.bio_info_coord import CoordUnit
from core.coordinates.exp_factor_coord import CoordTask, CoordAttention, CoordCategory
from core.coordinates.time_coord import CoordTime
from core.data_structures.core_data import CoreData
from core.data_structures.firing_rates import FiringRatesPop, FiringRatesUnit
from core.processors.preprocess.assign_ensembles import EnsembleAssigner, Ensembles
from core.processors.preprocess.assign_folds import FoldAssigner, FoldLabels
from core.processors.preprocess.bootstrap import Bootstrapper
from core.processors.preprocess.map_indices import IndexMapper, Indices
from core.processors.preprocess.stratify import Stratifier, Strata


class EnsemblesBuilder(DataBuilder[Ensembles]):
    """
    Build ensembles of units to form pseudo-populations for cross-validation.

    Product:`Ensembles` data structure.

    Class Attributes
    ----------------
    PRODUCT_CLASS : type
        See the base class attribute.
    TMP_DATA : Tuple[str]
        See the base class attribute.

    Configuration Parameters
    ------------------------
    ensemble_size : int
        Number of units required to form each ensemble (imposed by the area with the lowest number
        of units).
    n_ensembles_max : int
        Maximum number of ensembles to form from the population (to limit the number of ensembles
        and computational cost for the areas with the largest populations).

    Processing Attributes
    ---------------------
    units : List[Unit]
        Units in the population.
    seed : int
        Seed for the random number generator, used in the ensemble assignment.
    ensembles : Ensembles
        Indices of the units in each ensemble. Shape: ``(n_ensembles, ensemble_size)``.
    n_ensembles : int
        (Property) Number of ensembles to form.
    n_units : int
        (Property) Number of units in the population (length of the inputs `units`).

    Methods
    -------
    """

    PRODUCT_CLASS = Ensembles
    TMP_DATA = ("data_per_unit", "seed", "ensembles")

    def __init__(self, ensemble_size: int, n_ensembles_max: int) -> None:
        # Call the base class constructor: declare empty product and internal data
        super().__init__()
        # Store configuration parameters
        self.ensemble_size = ensemble_size
        self.n_ensembles_max = n_ensembles_max
        # Declare attributes to store inputs and intermediate results
        self.units: List[Unit]
        self.seed: int
        self.ensembles: Ensembles

    def build(self, units: Optional[List[Unit]] = None, seed: int = 0, **kwargs) -> Ensembles:
        """
        Implement the base class method.

        Parameters
        ----------
        units : List[Unit]
            See the attribute `units`.
        seed : int
            See the attribute `seed`.

        Returns
        -------
        ensembles : Ensembles
            Data structure product instance.
        """

        return self.get_product()

    def generate_ensembles(self) -> Ensembles:
        """
        Generate the ensembles of units to form the pseudo-population.

        Returns
        -------
        ensembles : Ensembles
            See the attribute generated by this method.

        See Also
        --------
        `EnsembleAssigner`
        """
        assigner = EnsembleAssigner(self.ensemble_size, self.n_ensembles_max)
        ensembles = assigner.process(n_units=self.n_units, seed=self.seed)
        return ensembles

    # --- Construct Coordinates --------------------------------------------------------------------

    def construct_units_coord(self) -> CoordUnit:
        """
        Construct the units coordinate for the pseudo-population (unit labels in each ensemble).

        Returns
        -------
        units : CoordUnit
            See the attribute `units` in the data structure product.

        Warning
        -------
        Two indices are used to identify the units in the population:

        - ``unit``: index of the unit in the population (from 0 to ``n_units``).
        - ``u``: index of the unit in the ensemble (from 0 to ``ensemble_size``).
        """
        units = CoordUnit(np.full((self.n_ensembles, self.ensemble_size), "", dtype=np.str_))
        for ens, units_in_ensemble in enumerate(self.ensembles):
            for u, unit in units_in_ensemble:
                units[ens, u] = self.data_per_unit[unit].name
        return units
