
:mod:`mtcdb.utils.convert_xarray` [module]

Functionalities to convert data structures into xarray objects back and forth.



# TODO

from abc import ABC, abstractmethod
import numpy as np
import os
from typing import Any, Callable, Tuple
import xarray as xr

from mtcdb.constants import path_file

class EncoderXR:
    """
    Class to encode data structures into xarray objects. 
    """

    def __init__(self, x: Data):
        self.x = x

    def encode(self) -> Any:
        """Encodes the data structure into an xarray object.
        """
        data = self.x.data
        name = self.x.name
        dims = self.x.dims
        coords = {}
        attrs = {}
        for crd_name in self.x.coords_names:
            crd = self.x.__getattribute__(crd_name) # full coordinate object
            crd_dims = crd.dims
            crd_values = crd.values


        xarr = xr.DataArray(data, 
                            name=name, 
                            dims=dims, 
                            coords=coords, 
                            attrs=attrs)
        return xarr
    

class ConverterXR(Generic[Data]):
    """
    Convert data sets into ``xarray.DataArray`` back and forth.
    
    In the context of the MTCDB project :
    - `xarray.DataArray`` are used to save in netCDF file format.
      This format is useful to store coordinates and attributes together with the data.
    - However, ``xarray.DataArray`` are not manipulated directly (overhead).
      Instead, data and coordinates are represented by specific objects,
      and manipulated under the form of ``numpy.npt.NDArrays``.

    See Also
    --------
    xarray.DataArray: Data array with labeled dimensions and coordinates.
    """
    def __init__(self, 
                 data: npt.NDArray, 
                 coords: dict[str, Any], 
                 meta: dict[str, Any]):
        self.data = data
        self.coords = coords
        self.meta = meta
        self.xa = None

    def to_xarray(self,
                    data: npt.NDArray,
                    **kwargs: dict[str, Any]
                    ) -> xr.DataArray:
        """
        Construct a ``xarray.DataArray`` from data, coordinates and metadata.

        DataArray components:
        - ``name``   : str
            Name of the DataArray.
        - ``data``   : npt.NDArray
            Actual data to be encapsulated in the DataArray.
        - ``dims``   : Tuple[str]
            Dimensions of the data.
        - ``coords`` : Dict[str, Tuple[str, npt.NDArray]]
            Coordinates associated with the data.
            Keys: Coordinate names.
            Values: Tuple of dimension names and coordinate values.
        - ``attrs``  : Dict[str, Any]
            Additional information to describe the data.

        Correspondance between Data and DataArray components:
        - ``name``   : 
        - ``data``   : ``x.data``
        - ``dims``   : 
        - ``coords`` : Coordinates objects stored in the Data.
        - ``attrs``  : Non-coordinate attributes stored in the Data.
                       + Non-npt.NDArray attributes stored in the coordinates.
        
        Parameters
        ----------
        data : npt.NDArray
            Actual data to be encapsulated in the DataArray.
        kwargs : dict[str, Any]
            Coordinates and attributes values to be stored in the DataArray.
            The names of the parameters should match those in the class attributes
            ``meta`` and ``coords_map``.
            Coordinates should be ``numpy.npt.NDArrays`` or lists.
            Attributes should be of the type expected in the class attributes.
        
        Example
        -------
        Syntax to instabciate an ``xarray.DataArray``:
        .. code-block:: python
            dims = ("x", "y", "z")
            data = np.zeros((4, 4, 4)) # 3D data
            x_labels = np.array([1, 2, 3, 4]) # 1D coord
            yz_labels = np.array([[1, 2, 3, 4], [5, 6, 7, 8]]) # 2D coord
            coords = {"x_labels": ("x", x_labels),
                      "yz_labels": (("y", "z"), yz_labels)}
            attrs = {"units": "m/s"}
            xr.DataArray(name = "name", 
                        dims = dims,
                        data = data, 
                        coords = coords, 
                        attrs = attrs)
         """
        name = self.__class__.__name__
        dims = self.dims
        coords = {name: (cdims, kwargs[name]) for name, cdims in self.coords_map.items() if name in kwargs}
        attrs = {name: kwargs[name] for name in self.meta if name in kwargs}
        xa = xr.DataArray(name=name,
                          dims=dims, 
                          data=data, 
                          coords=coords, 
                          attrs=attrs)
        return xa



"""
# NOT SURE IT IS STILL VALID
    Example
    -------
    ..code-block: python
        class SubClassData(XRConvert):
            coords = {'attr1': 0, 'attr2': (1, 2)}
            meta = ['attr3', 'attr4']
            def __init__(self, data, coords, meta):
                self.data = data
                self.coords = coords
                self.meta = meta
                super().__init__(data, coords, other_attrs)

                
    Each subclass using this function should have defined class attributes
        with the following structure :
        .. code-block:: python
            class SubClassData(XRConvert):
            
                # Declare data dimensions
                dims = ('dim1', 'dim2', 'dim3')

                # Declare attributes with expected types
                class Meta(TypedDict):
                    attr1: Optional[int]
                    attr2: Optional[str]
                meta: Meta = {"attr1": None, 
                              "attr2": None}

                # Declare coordinates with expected dimensions
                coords_map = {'coord1': ('dim1'), 
                              'coord2': ('dim2', 'dim3')}
                
                def __init__(self, data, attr1, attr2, coord1, coord2):
                    self.xa = super().to_xarray(data, attr1=attr1, attr2=attr2, coord1=coord1, coord2=coord2)
       
"""
